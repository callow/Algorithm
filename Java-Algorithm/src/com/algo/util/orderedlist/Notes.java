package com.algo.util.orderedlist;

/**
 * 有序树 = 搜索二叉树<br>
 * 
 * 平衡搜索二叉树： 最高的高度是Log(n), 需要左旋/右旋, CRUD 都是Log(N), 每个结点左右树的高度差<= 1<br>
 * 
 * 左旋： 右树可能过长，左旋让其变平。 在哪个头节点上左旋。e.g: 在A上左旋，A往左边倒，A的右孩子B上来，B的左孩子给A，A原本左孩子仍然拿着
									
*    
     A                          B
 *  / \                        / \ 
 * T   B                      A   C
 *    / \          ->        / \  / \
 *   K   C                  T  K S  F
 *      / \
 *     S   F								   
    
  右旋： 左树可能过长，右旋让其变平。 在哪个头节点上右旋。e.g: 在A上右旋，A往右边倒，A的左孩子B上来，B的右孩子给A，A原本右孩子仍然拿着  
     		A                 B
 *  	   / \               / \
	 *    B   T             C   A
	 *   / \          ->   / \  / \
	 *  C   K             S  F  K  T
	 * / \
	 *S   F
	 *
   注： x为头 右树上最左结点，一点过是 整棵树距离x最近且比x大的.
 */ 
public class Notes {
	
	

}
